// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import MultiPlatformLibrary

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-core/kotlinx/serialization/descriptors/PolymorphicKind */
public enum PolymorphicKindKs {

  case oPEN
  case sEALED

  public var sealed: PolymorphicKind {
    switch self {
    case .oPEN:
      return MultiPlatformLibrary.PolymorphicKind.OPEN() as MultiPlatformLibrary.PolymorphicKind
    case .sEALED:
      return MultiPlatformLibrary.PolymorphicKind.SEALED() as MultiPlatformLibrary.PolymorphicKind
    }
  }

  public init(_ obj: PolymorphicKind) {
    if obj is MultiPlatformLibrary.PolymorphicKind.OPEN {
      self = .oPEN
    } else if obj is MultiPlatformLibrary.PolymorphicKind.SEALED {
      self = .sEALED
    } else {
      fatalError("PolymorphicKindKs not synchronized with PolymorphicKind class")
    }
  }

}

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-core/kotlinx/serialization/descriptors/PrimitiveKind */
public enum PrimitiveKindKs {

  case bOOLEAN
  case bYTE
  case cHAR
  case dOUBLE
  case fLOAT
  case iNT
  case lONG
  case sHORT
  case sTRING

  public var sealed: PrimitiveKind {
    switch self {
    case .bOOLEAN:
      return MultiPlatformLibrary.PrimitiveKind.BOOLEAN() as MultiPlatformLibrary.PrimitiveKind
    case .bYTE:
      return MultiPlatformLibrary.PrimitiveKind.BYTE() as MultiPlatformLibrary.PrimitiveKind
    case .cHAR:
      return MultiPlatformLibrary.PrimitiveKind.CHAR() as MultiPlatformLibrary.PrimitiveKind
    case .dOUBLE:
      return MultiPlatformLibrary.PrimitiveKind.DOUBLE() as MultiPlatformLibrary.PrimitiveKind
    case .fLOAT:
      return MultiPlatformLibrary.PrimitiveKind.FLOAT() as MultiPlatformLibrary.PrimitiveKind
    case .iNT:
      return MultiPlatformLibrary.PrimitiveKind.INT() as MultiPlatformLibrary.PrimitiveKind
    case .lONG:
      return MultiPlatformLibrary.PrimitiveKind.LONG() as MultiPlatformLibrary.PrimitiveKind
    case .sHORT:
      return MultiPlatformLibrary.PrimitiveKind.SHORT() as MultiPlatformLibrary.PrimitiveKind
    case .sTRING:
      return MultiPlatformLibrary.PrimitiveKind.STRING() as MultiPlatformLibrary.PrimitiveKind
    }
  }

  public init(_ obj: PrimitiveKind) {
    if obj is MultiPlatformLibrary.PrimitiveKind.BOOLEAN {
      self = .bOOLEAN
    } else if obj is MultiPlatformLibrary.PrimitiveKind.BYTE {
      self = .bYTE
    } else if obj is MultiPlatformLibrary.PrimitiveKind.CHAR {
      self = .cHAR
    } else if obj is MultiPlatformLibrary.PrimitiveKind.DOUBLE {
      self = .dOUBLE
    } else if obj is MultiPlatformLibrary.PrimitiveKind.FLOAT {
      self = .fLOAT
    } else if obj is MultiPlatformLibrary.PrimitiveKind.INT {
      self = .iNT
    } else if obj is MultiPlatformLibrary.PrimitiveKind.LONG {
      self = .lONG
    } else if obj is MultiPlatformLibrary.PrimitiveKind.SHORT {
      self = .sHORT
    } else if obj is MultiPlatformLibrary.PrimitiveKind.STRING {
      self = .sTRING
    } else {
      fatalError("PrimitiveKindKs not synchronized with PrimitiveKind class")
    }
  }

}

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-core/kotlinx/serialization/descriptors/SerialKind */
public enum SerialKindKs {

  case polymorphicKind(PolymorphicKind)
  case primitiveKind(PrimitiveKind)
  case cONTEXTUAL
  case eNUM
  case structureKind(StructureKind)

  public var sealed: SerialKind {
    switch self {
    case .polymorphicKind(let obj):
      return obj as! MultiPlatformLibrary.SerialKind
    case .primitiveKind(let obj):
      return obj as! MultiPlatformLibrary.SerialKind
    case .cONTEXTUAL:
      return MultiPlatformLibrary.SerialKind.CONTEXTUAL() as MultiPlatformLibrary.SerialKind
    case .eNUM:
      return MultiPlatformLibrary.SerialKind.ENUM() as MultiPlatformLibrary.SerialKind
    case .structureKind(let obj):
      return obj as! MultiPlatformLibrary.SerialKind
    }
  }

  public init(_ obj: SerialKind) {
    if let obj = obj as? MultiPlatformLibrary.PolymorphicKind {
      self = .polymorphicKind(obj)
    } else if let obj = obj as? MultiPlatformLibrary.PrimitiveKind {
      self = .primitiveKind(obj)
    } else if obj is MultiPlatformLibrary.SerialKind.CONTEXTUAL {
      self = .cONTEXTUAL
    } else if obj is MultiPlatformLibrary.SerialKind.ENUM {
      self = .eNUM
    } else if let obj = obj as? MultiPlatformLibrary.StructureKind {
      self = .structureKind(obj)
    } else {
      fatalError("SerialKindKs not synchronized with SerialKind class")
    }
  }

}

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-core/kotlinx/serialization/descriptors/StructureKind */
public enum StructureKindKs {

  case cLASS
  case lIST
  case mAP
  case oBJECT

  public var sealed: StructureKind {
    switch self {
    case .cLASS:
      return MultiPlatformLibrary.StructureKind.CLASS() as MultiPlatformLibrary.StructureKind
    case .lIST:
      return MultiPlatformLibrary.StructureKind.LIST() as MultiPlatformLibrary.StructureKind
    case .mAP:
      return MultiPlatformLibrary.StructureKind.MAP() as MultiPlatformLibrary.StructureKind
    case .oBJECT:
      return MultiPlatformLibrary.StructureKind.OBJECT() as MultiPlatformLibrary.StructureKind
    }
  }

  public init(_ obj: StructureKind) {
    if obj is MultiPlatformLibrary.StructureKind.CLASS {
      self = .cLASS
    } else if obj is MultiPlatformLibrary.StructureKind.LIST {
      self = .lIST
    } else if obj is MultiPlatformLibrary.StructureKind.MAP {
      self = .mAP
    } else if obj is MultiPlatformLibrary.StructureKind.OBJECT {
      self = .oBJECT
    } else {
      fatalError("StructureKindKs not synchronized with StructureKind class")
    }
  }

}
