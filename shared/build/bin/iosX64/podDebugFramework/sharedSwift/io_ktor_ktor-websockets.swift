// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import shared

/**
 * selector: ClassContext/io.ktor:ktor-websockets/io/ktor/websocket/Frame */
public enum FrameKs {

  case binary(Frame.Binary)
  case close(Frame.Close)
  case ping(Frame.Ping)
  case pong(Frame.Pong)
  case text(Frame.Text)

  public var sealed: Frame {
    switch self {
    case .binary(let obj):
      return obj as! shared.Frame
    case .close(let obj):
      return obj as! shared.Frame
    case .ping(let obj):
      return obj as! shared.Frame
    case .pong(let obj):
      return obj as! shared.Frame
    case .text(let obj):
      return obj as! shared.Frame
    }
  }

  public init(_ obj: Frame) {
    if let obj = obj as? shared.Frame.Binary {
      self = .binary(obj)
    } else if let obj = obj as? shared.Frame.Close {
      self = .close(obj)
    } else if let obj = obj as? shared.Frame.Ping {
      self = .ping(obj)
    } else if let obj = obj as? shared.Frame.Pong {
      self = .pong(obj)
    } else if let obj = obj as? shared.Frame.Text {
      self = .text(obj)
    } else {
      fatalError("FrameKs not synchronized with Frame class")
    }
  }

}
