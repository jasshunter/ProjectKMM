// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import MultiPlatformLibrary

/**
 * selector: ClassContext/org.mongodb.kbson:kbson/org/mongodb/kbson/BsonValue */
public enum BsonValueKs {

  case bsonArray(BsonArray)
  case bsonBinary(BsonBinary)
  case bsonBoolean(BsonBoolean)
  case bsonDBPointer(BsonDBPointer)
  case bsonDateTime(BsonDateTime)
  case bsonDecimal128(BsonDecimal128)
  case bsonDocument(BsonDocument)
  case bsonJavaScript(BsonJavaScript)
  case bsonJavaScriptWithScope(BsonJavaScriptWithScope)
  case bsonMaxKey
  case bsonMinKey
  case bsonNull
  case bsonNumber(BsonNumber)
  case bsonObjectId(BsonObjectId)
  case bsonRegularExpression(BsonRegularExpression)
  case bsonString(BsonString)
  case bsonSymbol(BsonSymbol)
  case bsonTimestamp(BsonTimestamp)
  case bsonUndefined

  public var sealed: BsonValue {
    switch self {
    case .bsonArray(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonBinary(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonBoolean(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonDBPointer(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonDateTime(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonDecimal128(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonDocument(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonJavaScript(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonJavaScriptWithScope(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonMaxKey:
      return MultiPlatformLibrary.BsonMaxKey() as MultiPlatformLibrary.BsonValue
    case .bsonMinKey:
      return MultiPlatformLibrary.BsonMinKey() as MultiPlatformLibrary.BsonValue
    case .bsonNull:
      return MultiPlatformLibrary.BsonNull() as MultiPlatformLibrary.BsonValue
    case .bsonNumber(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonObjectId(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonRegularExpression(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonString(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonSymbol(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonTimestamp(let obj):
      return obj as! MultiPlatformLibrary.BsonValue
    case .bsonUndefined:
      return MultiPlatformLibrary.BsonUndefined() as MultiPlatformLibrary.BsonValue
    }
  }

  public init(_ obj: BsonValue) {
    if let obj = obj as? MultiPlatformLibrary.BsonArray {
      self = .bsonArray(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonBinary {
      self = .bsonBinary(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonBoolean {
      self = .bsonBoolean(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonDBPointer {
      self = .bsonDBPointer(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonDateTime {
      self = .bsonDateTime(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonDecimal128 {
      self = .bsonDecimal128(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonDocument {
      self = .bsonDocument(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonJavaScript {
      self = .bsonJavaScript(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonJavaScriptWithScope {
      self = .bsonJavaScriptWithScope(obj)
    } else if obj is MultiPlatformLibrary.BsonMaxKey {
      self = .bsonMaxKey
    } else if obj is MultiPlatformLibrary.BsonMinKey {
      self = .bsonMinKey
    } else if obj is MultiPlatformLibrary.BsonNull {
      self = .bsonNull
    } else if let obj = obj as? MultiPlatformLibrary.BsonNumber {
      self = .bsonNumber(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonObjectId {
      self = .bsonObjectId(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonRegularExpression {
      self = .bsonRegularExpression(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonString {
      self = .bsonString(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonSymbol {
      self = .bsonSymbol(obj)
    } else if let obj = obj as? MultiPlatformLibrary.BsonTimestamp {
      self = .bsonTimestamp(obj)
    } else if obj is MultiPlatformLibrary.BsonUndefined {
      self = .bsonUndefined
    } else {
      fatalError("BsonValueKs not synchronized with BsonValue class")
    }
  }

}
