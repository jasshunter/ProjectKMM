// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import shared

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-json/kotlinx/serialization/json/Json */
public enum JsonKs {

  case `default`(Json.Default)

  public var sealed: Json {
    switch self {
    case .default(let obj):
      return obj as! shared.Json
    }
  }

  public init(_ obj: Json) {
    if let obj = obj as? shared.Json.Default {
      self = .default(obj)
    } else {
      fatalError("JsonKs not synchronized with Json class")
    }
  }

}

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-json/kotlinx/serialization/json/JsonElement */
public enum JsonElementKs {

  case jsonArray(JsonArray)
  case jsonObject(JsonObject)
  case jsonPrimitive(JsonPrimitive)

  public var sealed: JsonElement {
    switch self {
    case .jsonArray(let obj):
      return obj as! shared.JsonElement
    case .jsonObject(let obj):
      return obj as! shared.JsonElement
    case .jsonPrimitive(let obj):
      return obj as! shared.JsonElement
    }
  }

  public init(_ obj: JsonElement) {
    if let obj = obj as? shared.JsonArray {
      self = .jsonArray(obj)
    } else if let obj = obj as? shared.JsonObject {
      self = .jsonObject(obj)
    } else if let obj = obj as? shared.JsonPrimitive {
      self = .jsonPrimitive(obj)
    } else {
      fatalError("JsonElementKs not synchronized with JsonElement class")
    }
  }

}

/**
 * selector: ClassContext/org.jetbrains.kotlinx:kotlinx-serialization-json/kotlinx/serialization/json/JsonPrimitive */
public enum JsonPrimitiveKs {

  case jsonNull

  public var sealed: JsonPrimitive {
    switch self {
    case .jsonNull:
      return shared.JsonNull() as shared.JsonPrimitive
    }
  }

  public init(_ obj: JsonPrimitive) {
    if obj is shared.JsonNull {
      self = .jsonNull
    } else {
      fatalError("JsonPrimitiveKs not synchronized with JsonPrimitive class")
    }
  }

}
